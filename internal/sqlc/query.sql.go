// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
)

const createMessage = `-- name: CreateMessage :execlastid
INSERT INTO messages (sender_id, rec_id, body)
VALUES ($1, $2, $3)
RETURNING id, created_at
`

type CreateMessageParams struct {
	SenderID int64
	RecID    int64
	Body     string
}

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (username, password)
VALUES ($1, $2)
RETURNING id, created_at
`

type CreateUserParams struct {
	Username string
	Password []byte
}

const getUser = `-- name: GetUser :one

SELECT id, username, password, created_at
FROM users
WHERE username = $1
`

// USERS
func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const selectConvMessages = `-- name: SelectConvMessages :many
SELECT id, sender_id, rec_id, body, created_at
FROM messages
WHERE (sender_id = $1 AND rec_id = $2) OR (sender_id = $2 AND rec_id = $1)
ORDER BY created_at DESC
`

type SelectConvMessagesParams struct {
	SenderID int64
	RecID    int64
}

func (q *Queries) SelectConvMessages(ctx context.Context, arg SelectConvMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, selectConvMessages, arg.SenderID, arg.RecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RecID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRecMessages = `-- name: SelectRecMessages :many
SELECT id, sender_id, rec_id, body, created_at
FROM messages
WHERE rec_id = $1
ORDER BY created_at DESC
`

func (q *Queries) SelectRecMessages(ctx context.Context, recID int64) ([]Message, error) {
	rows, err := q.db.Query(ctx, selectRecMessages, recID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RecID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSentMessages = `-- name: SelectSentMessages :many
SELECT id, sender_id, rec_id, body, created_at
FROM messages
WHERE sender_id = $1
ORDER BY created_at DESC
`

// MESSAGES
func (q *Queries) SelectSentMessages(ctx context.Context, senderID int64) ([]Message, error) {
	rows, err := q.db.Query(ctx, selectSentMessages, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RecID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
